{"ast":null,"code":"import axiosClient from './axiosClient';\nconst URL = '/words';\nconst wordApi = {\n  postContributeWord: wordInfor => {\n    return axiosClient.post(`${URL}/contribute/add-word`, {\n      ...wordInfor\n    });\n  },\n  getCheckWordExistence: (word, type) => {\n    return axiosClient.get(`${URL}/exist`, {\n      params: {\n        word,\n        type\n      }\n    });\n  },\n  // get word, type, phonetic, mean\n  getWordList: (page = 1, perPage = 8, packInfo, sortType = 'rand') => {\n    return axiosClient.get(`${URL}/`, {\n      params: {\n        page,\n        perPage,\n        packInfo: JSON.stringify(packInfo),\n        sortType\n      }\n    });\n  },\n  getSearchWord: (word = '', isCompact = false) => {\n    return axiosClient.get(`${URL}/search-word`, {\n      params: {\n        word,\n        isCompact\n      }\n    });\n  },\n  getWordDetails: (word = '') => {\n    return axiosClient.get(`${URL}/word-details`, {\n      params: {\n        word\n      }\n    });\n  },\n  getUserFavoriteList: (page = 0, perPage = 20, sortType = 'rand') => {\n    return axiosClient.get(`${URL}/favorite-list`, {\n      params: {\n        page,\n        perPage,\n        sortType\n      }\n    });\n  }\n};\nexport default wordApi;","map":{"version":3,"names":["axiosClient","URL","wordApi","postContributeWord","wordInfor","post","getCheckWordExistence","word","type","get","params","getWordList","page","perPage","packInfo","sortType","JSON","stringify","getSearchWord","isCompact","getWordDetails","getUserFavoriteList"],"sources":["D:/DuAn/thangdoan/dynonary-english/frontend/src/apis/wordApi.js"],"sourcesContent":["import axiosClient from './axiosClient';\r\n\r\nconst URL = '/words';\r\n\r\nconst wordApi = {\r\n  postContributeWord: (wordInfor) => {\r\n    return axiosClient.post(`${URL}/contribute/add-word`, { ...wordInfor });\r\n  },\r\n\r\n  getCheckWordExistence: (word, type) => {\r\n    return axiosClient.get(`${URL}/exist`, { params: { word, type } });\r\n  },\r\n\r\n  // get word, type, phonetic, mean\r\n  getWordList: (page = 1, perPage = 8, packInfo, sortType = 'rand') => {\r\n    return axiosClient.get(`${URL}/`, {\r\n      params: { page, perPage, packInfo: JSON.stringify(packInfo), sortType },\r\n    });\r\n  },\r\n\r\n  getSearchWord: (word = '', isCompact = false) => {\r\n    return axiosClient.get(`${URL}/search-word`, {\r\n      params: { word, isCompact },\r\n    });\r\n  },\r\n\r\n  getWordDetails: (word = '') => {\r\n    return axiosClient.get(`${URL}/word-details`, { params: { word } });\r\n  },\r\n\r\n  getUserFavoriteList: (page = 0, perPage = 20, sortType = 'rand') => {\r\n    return axiosClient.get(`${URL}/favorite-list`, {\r\n      params: { page, perPage, sortType },\r\n    });\r\n  },\r\n};\r\n\r\nexport default wordApi;\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,eAAe;AAEvC,MAAMC,GAAG,GAAG,QAAQ;AAEpB,MAAMC,OAAO,GAAG;EACdC,kBAAkB,EAAGC,SAAS,IAAK;IACjC,OAAOJ,WAAW,CAACK,IAAI,CAAE,GAAEJ,GAAI,sBAAqB,EAAE;MAAE,GAAGG;IAAU,CAAC,CAAC;EACzE,CAAC;EAEDE,qBAAqB,EAAEA,CAACC,IAAI,EAAEC,IAAI,KAAK;IACrC,OAAOR,WAAW,CAACS,GAAG,CAAE,GAAER,GAAI,QAAO,EAAE;MAAES,MAAM,EAAE;QAAEH,IAAI;QAAEC;MAAK;IAAE,CAAC,CAAC;EACpE,CAAC;EAED;EACAG,WAAW,EAAEA,CAACC,IAAI,GAAG,CAAC,EAAEC,OAAO,GAAG,CAAC,EAAEC,QAAQ,EAAEC,QAAQ,GAAG,MAAM,KAAK;IACnE,OAAOf,WAAW,CAACS,GAAG,CAAE,GAAER,GAAI,GAAE,EAAE;MAChCS,MAAM,EAAE;QAAEE,IAAI;QAAEC,OAAO;QAAEC,QAAQ,EAAEE,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC;QAAEC;MAAS;IACxE,CAAC,CAAC;EACJ,CAAC;EAEDG,aAAa,EAAEA,CAACX,IAAI,GAAG,EAAE,EAAEY,SAAS,GAAG,KAAK,KAAK;IAC/C,OAAOnB,WAAW,CAACS,GAAG,CAAE,GAAER,GAAI,cAAa,EAAE;MAC3CS,MAAM,EAAE;QAAEH,IAAI;QAAEY;MAAU;IAC5B,CAAC,CAAC;EACJ,CAAC;EAEDC,cAAc,EAAEA,CAACb,IAAI,GAAG,EAAE,KAAK;IAC7B,OAAOP,WAAW,CAACS,GAAG,CAAE,GAAER,GAAI,eAAc,EAAE;MAAES,MAAM,EAAE;QAAEH;MAAK;IAAE,CAAC,CAAC;EACrE,CAAC;EAEDc,mBAAmB,EAAEA,CAACT,IAAI,GAAG,CAAC,EAAEC,OAAO,GAAG,EAAE,EAAEE,QAAQ,GAAG,MAAM,KAAK;IAClE,OAAOf,WAAW,CAACS,GAAG,CAAE,GAAER,GAAI,gBAAe,EAAE;MAC7CS,MAAM,EAAE;QAAEE,IAAI;QAAEC,OAAO;QAAEE;MAAS;IACpC,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAeb,OAAO"},"metadata":{},"sourceType":"module"}