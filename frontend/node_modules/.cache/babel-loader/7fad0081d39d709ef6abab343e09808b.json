{"ast":null,"code":"var _jsxFileName = \"D:\\\\DuAn\\\\thangdoan\\\\dynonary-english\\\\frontend\\\\src\\\\components\\\\Contribution\\\\Word\\\\data.js\",\n  _s = $RefreshSig$();\nimport wordApi from 'apis/wordApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport WordContribution from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst analysisExample = (exampleStr = '', word = '') => {\n  if (typeof exampleStr !== 'string' || exampleStr === '') {\n    return [];\n  }\n  const exampleArr = exampleStr.split('\\n');\n  for (let str of exampleArr) {\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\n      return false;\n    }\n  }\n  return exampleArr;\n};\nfunction WordContributionData() {\n  _s();\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n  const handleSubmit = async data => {\n    try {\n      setSubmitting(true);\n      const {\n        examples,\n        synonyms,\n        antonyms,\n        word,\n        phonetic,\n        ...rest\n      } = data;\n\n      // check examples validation\n      const exampleArr = analysisExample(examples, word);\n      if (typeof exampleArr === 'boolean' && !exampleArr) {\n        dispatch(setMessage({\n          type: 'warning',\n          message: 'Câu ví dụ phải chứa từ vựng mới.'\n        }));\n        setSubmitting(false);\n        return;\n      }\n\n      // split synonyms string to an array synonyms\n      const synonymArr = synonyms !== '' ? synonyms.split('\\n') : [];\n\n      // split antonyms string to an array synonyms\n      const antonymArr = antonyms !== '' ? antonyms.split('\\n') : [];\n\n      // call API\n      const dataSend = {\n        ...rest,\n        examples: exampleArr,\n        synonyms: synonymArr,\n        antonyms: antonymArr,\n        word,\n        phonetic: phonetic.replaceAll('/', '')\n      };\n      const apiRes = await wordApi.postContributeWord(dataSend);\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\n          duration: 5000\n        }));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Thêm từ mới không thành công, thử lại';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(WordContribution, {\n    onSubmitForm: handleSubmit,\n    submitting: submitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(WordContributionData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n_c = WordContributionData;\nexport default WordContributionData;\nvar _c;\n$RefreshReg$(_c, \"WordContributionData\");","map":{"version":3,"names":["wordApi","React","useState","useDispatch","setMessage","WordContribution","jsxDEV","_jsxDEV","analysisExample","exampleStr","word","exampleArr","split","str","toLocaleLowerCase","indexOf","WordContributionData","_s","submitting","setSubmitting","dispatch","handleSubmit","data","examples","synonyms","antonyms","phonetic","rest","type","message","synonymArr","antonymArr","dataSend","replaceAll","apiRes","postContributeWord","status","duration","error","_error$response","_error$response$data","response","onSubmitForm","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DuAn/thangdoan/dynonary-english/frontend/src/components/Contribution/Word/data.js"],"sourcesContent":["import wordApi from 'apis/wordApi';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setMessage } from 'redux/slices/message.slice';\r\nimport WordContribution from './index';\r\n\r\nconst analysisExample = (exampleStr = '', word = '') => {\r\n  if (typeof exampleStr !== 'string' || exampleStr === '') {\r\n    return [];\r\n  }\r\n\r\n  const exampleArr = exampleStr.split('\\n');\r\n  for (let str of exampleArr) {\r\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return exampleArr;\r\n};\r\n\r\nfunction WordContributionData() {\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = async (data) => {\r\n    try {\r\n      setSubmitting(true);\r\n      const { examples, synonyms, antonyms, word, phonetic, ...rest } = data;\r\n\r\n      // check examples validation\r\n      const exampleArr = analysisExample(examples, word);\r\n      if (typeof exampleArr === 'boolean' && !exampleArr) {\r\n        dispatch(\r\n          setMessage({\r\n            type: 'warning',\r\n            message: 'Câu ví dụ phải chứa từ vựng mới.',\r\n          }),\r\n        );\r\n        setSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      // split synonyms string to an array synonyms\r\n      const synonymArr = synonyms !== '' ? synonyms.split('\\n') : [];\r\n\r\n      // split antonyms string to an array synonyms\r\n      const antonymArr = antonyms !== '' ? antonyms.split('\\n') : [];\r\n\r\n      // call API\r\n      const dataSend = {\r\n        ...rest,\r\n        examples: exampleArr,\r\n        synonyms: synonymArr,\r\n        antonyms: antonymArr,\r\n        word,\r\n        phonetic: phonetic.replaceAll('/', ''),\r\n      };\r\n\r\n      const apiRes = await wordApi.postContributeWord(dataSend);\r\n\r\n      if (apiRes.status === 200) {\r\n        dispatch(\r\n          setMessage({\r\n            type: 'success',\r\n            message:\r\n              'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\r\n            duration: 5000,\r\n          }),\r\n        );\r\n        setSubmitting(false);\r\n      }\r\n    } catch (error) {\r\n      const message =\r\n        error.response?.data?.message ||\r\n        'Thêm từ mới không thành công, thử lại';\r\n      dispatch(\r\n        setMessage({\r\n          type: 'error',\r\n          message,\r\n        }),\r\n      );\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <WordContribution onSubmitForm={handleSubmit} submitting={submitting} />\r\n  );\r\n}\r\n\r\nexport default WordContributionData;\r\n"],"mappings":";;AAAA,OAAOA,OAAO,MAAM,cAAc;AAClC,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,QAAQ,4BAA4B;AACvD,OAAOC,gBAAgB,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,eAAe,GAAGA,CAACC,UAAU,GAAG,EAAE,EAAEC,IAAI,GAAG,EAAE,KAAK;EACtD,IAAI,OAAOD,UAAU,KAAK,QAAQ,IAAIA,UAAU,KAAK,EAAE,EAAE;IACvD,OAAO,EAAE;EACX;EAEA,MAAME,UAAU,GAAGF,UAAU,CAACG,KAAK,CAAC,IAAI,CAAC;EACzC,KAAK,IAAIC,GAAG,IAAIF,UAAU,EAAE;IAC1B,IAAIE,GAAG,CAACC,iBAAiB,CAAC,CAAC,CAACC,OAAO,CAACL,IAAI,CAACI,iBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;MACpE,OAAO,KAAK;IACd;EACF;EAEA,OAAOH,UAAU;AACnB,CAAC;AAED,SAASK,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMkB,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9B,MAAMkB,YAAY,GAAG,MAAOC,IAAI,IAAK;IACnC,IAAI;MACFH,aAAa,CAAC,IAAI,CAAC;MACnB,MAAM;QAAEI,QAAQ;QAAEC,QAAQ;QAAEC,QAAQ;QAAEf,IAAI;QAAEgB,QAAQ;QAAE,GAAGC;MAAK,CAAC,GAAGL,IAAI;;MAEtE;MACA,MAAMX,UAAU,GAAGH,eAAe,CAACe,QAAQ,EAAEb,IAAI,CAAC;MAClD,IAAI,OAAOC,UAAU,KAAK,SAAS,IAAI,CAACA,UAAU,EAAE;QAClDS,QAAQ,CACNhB,UAAU,CAAC;UACTwB,IAAI,EAAE,SAAS;UACfC,OAAO,EAAE;QACX,CAAC,CACH,CAAC;QACDV,aAAa,CAAC,KAAK,CAAC;QACpB;MACF;;MAEA;MACA,MAAMW,UAAU,GAAGN,QAAQ,KAAK,EAAE,GAAGA,QAAQ,CAACZ,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;;MAE9D;MACA,MAAMmB,UAAU,GAAGN,QAAQ,KAAK,EAAE,GAAGA,QAAQ,CAACb,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE;;MAE9D;MACA,MAAMoB,QAAQ,GAAG;QACf,GAAGL,IAAI;QACPJ,QAAQ,EAAEZ,UAAU;QACpBa,QAAQ,EAAEM,UAAU;QACpBL,QAAQ,EAAEM,UAAU;QACpBrB,IAAI;QACJgB,QAAQ,EAAEA,QAAQ,CAACO,UAAU,CAAC,GAAG,EAAE,EAAE;MACvC,CAAC;MAED,MAAMC,MAAM,GAAG,MAAMlC,OAAO,CAACmC,kBAAkB,CAACH,QAAQ,CAAC;MAEzD,IAAIE,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;QACzBhB,QAAQ,CACNhB,UAAU,CAAC;UACTwB,IAAI,EAAE,SAAS;UACfC,OAAO,EACL,mEAAmE;UACrEQ,QAAQ,EAAE;QACZ,CAAC,CACH,CAAC;QACDlB,aAAa,CAAC,KAAK,CAAC;MACtB;IACF,CAAC,CAAC,OAAOmB,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACd,MAAMX,OAAO,GACX,EAAAU,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBjB,IAAI,cAAAkB,oBAAA,uBAApBA,oBAAA,CAAsBX,OAAO,KAC7B,uCAAuC;MACzCT,QAAQ,CACNhB,UAAU,CAAC;QACTwB,IAAI,EAAE,OAAO;QACbC;MACF,CAAC,CACH,CAAC;MACDV,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACEZ,OAAA,CAACF,gBAAgB;IAACqC,YAAY,EAAErB,YAAa;IAACH,UAAU,EAAEA;EAAW;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE5E;AAAC7B,EAAA,CApEQD,oBAAoB;EAAA,QAEVb,WAAW;AAAA;AAAA4C,EAAA,GAFrB/B,oBAAoB;AAsE7B,eAAeA,oBAAoB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}