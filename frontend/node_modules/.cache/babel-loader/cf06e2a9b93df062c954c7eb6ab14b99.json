{"ast":null,"code":"var _jsxFileName = \"D:\\\\DuAn\\\\thangdoan\\\\dynonary-english\\\\frontend\\\\src\\\\components\\\\Register\\\\data.js\",\n  _s = $RefreshSig$();\nimport accountApi from 'apis/accountApi';\nimport { ROUTES, UX } from 'constant';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setMessage } from 'redux/slices/message.slice';\nimport Register from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RegisterData() {\n  _s();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const handleRegister = async account => {\n    try {\n      setLoading(true);\n      const {\n        email,\n        password,\n        name\n      } = account;\n      const apiRes = await accountApi.postRegisterAccount(email.toLowerCase(), name, password);\n      if ((apiRes === null || apiRes === void 0 ? void 0 : apiRes.status) === 200) {\n        const message = 'Đăng ký thành công';\n        dispatch(setMessage({\n          message,\n          type: 'success'\n        }));\n        setTimeout(() => {\n          setLoading(false);\n          history.push(ROUTES.LOGIN);\n        }, UX.DELAY_TIME);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ' thất bại, thử lại !';\n      dispatch(setMessage({\n        message,\n        type: 'error'\n      }));\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Register, {\n    onRegister: handleRegister,\n    loading: loading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}\n_s(RegisterData, \"1DXXsYNX7/v/o2qmSrGSXfn10m0=\", false, function () {\n  return [useDispatch, useHistory];\n});\n_c = RegisterData;\nexport default RegisterData;\nvar _c;\n$RefreshReg$(_c, \"RegisterData\");","map":{"version":3,"names":["accountApi","ROUTES","UX","React","useState","useDispatch","useHistory","setMessage","Register","jsxDEV","_jsxDEV","RegisterData","_s","dispatch","history","loading","setLoading","handleRegister","account","email","password","name","apiRes","postRegisterAccount","toLowerCase","status","message","type","setTimeout","push","LOGIN","DELAY_TIME","error","_error$response","_error$response$data","response","data","onRegister","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DuAn/thangdoan/dynonary-english/frontend/src/components/Register/data.js"],"sourcesContent":["import accountApi from 'apis/accountApi';\r\nimport { ROUTES, UX } from 'constant';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { setMessage } from 'redux/slices/message.slice';\r\nimport Register from './index';\r\n\r\nfunction RegisterData() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleRegister = async (account) => {\r\n    try {\r\n      setLoading(true);\r\n      const { email, password, name } = account;\r\n      const apiRes = await accountApi.postRegisterAccount(\r\n        email.toLowerCase(),\r\n        name,\r\n        password,\r\n      );\r\n\r\n      if (apiRes?.status === 200) {\r\n        const message = 'Đăng ký thành công';\r\n        dispatch(setMessage({ message, type: 'success' }));\r\n        setTimeout(() => {\r\n          setLoading(false);\r\n          history.push(ROUTES.LOGIN);\r\n        }, UX.DELAY_TIME);\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || ' thất bại, thử lại !';\r\n      dispatch(setMessage({ message, type: 'error' }));\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return <Register onRegister={handleRegister} loading={loading} />;\r\n}\r\n\r\nexport default RegisterData;\r\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,iBAAiB;AACxC,SAASC,MAAM,EAAEC,EAAE,QAAQ,UAAU;AACrC,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,UAAU,QAAQ,4BAA4B;AACvD,OAAOC,QAAQ,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,OAAO,GAAGR,UAAU,CAAC,CAAC;EAC5B,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMa,cAAc,GAAG,MAAOC,OAAO,IAAK;IACxC,IAAI;MACFF,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM;QAAEG,KAAK;QAAEC,QAAQ;QAAEC;MAAK,CAAC,GAAGH,OAAO;MACzC,MAAMI,MAAM,GAAG,MAAMtB,UAAU,CAACuB,mBAAmB,CACjDJ,KAAK,CAACK,WAAW,CAAC,CAAC,EACnBH,IAAI,EACJD,QACF,CAAC;MAED,IAAI,CAAAE,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,MAAM,MAAK,GAAG,EAAE;QAC1B,MAAMC,OAAO,GAAG,oBAAoB;QACpCb,QAAQ,CAACN,UAAU,CAAC;UAAEmB,OAAO;UAAEC,IAAI,EAAE;QAAU,CAAC,CAAC,CAAC;QAClDC,UAAU,CAAC,MAAM;UACfZ,UAAU,CAAC,KAAK,CAAC;UACjBF,OAAO,CAACe,IAAI,CAAC5B,MAAM,CAAC6B,KAAK,CAAC;QAC5B,CAAC,EAAE5B,EAAE,CAAC6B,UAAU,CAAC;MACnB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACd,MAAMR,OAAO,GAAG,EAAAO,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBR,OAAO,KAAI,sBAAsB;MACvEb,QAAQ,CAACN,UAAU,CAAC;QAAEmB,OAAO;QAAEC,IAAI,EAAE;MAAQ,CAAC,CAAC,CAAC;MAChDX,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBAAON,OAAA,CAACF,QAAQ;IAAC6B,UAAU,EAAEpB,cAAe;IAACF,OAAO,EAAEA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnE;AAAC7B,EAAA,CA/BQD,YAAY;EAAA,QACFN,WAAW,EACZC,UAAU;AAAA;AAAAoC,EAAA,GAFnB/B,YAAY;AAiCrB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}