{"ast":null,"code":"var _jsxFileName = \"D:\\\\DuAn\\\\thangdoan\\\\dynonary-english\\\\frontend\\\\src\\\\components\\\\Login\\\\SocialNetwork\\\\Google.js\",\n  _s = $RefreshSig$();\nimport accountApi from 'apis/accountApi';\nimport ggIcon from 'assets/icons/gg-icon.png';\nimport { UX } from 'constant';\nimport React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport useStyle from './style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginGoogle() {\n  _s();\n  const classes = useStyle();\n  const dispatch = useDispatch();\n\n  // handle success login\n  const onLoginSuccess = async () => {\n    try {\n      dispatch(setMessage({\n        type: 'success',\n        message: 'Đăng nhập thành công',\n        duration: UX.DELAY_TIME\n      }));\n      setTimeout(() => {\n        location.href = '/';\n      }, UX.DELAY_TIME);\n    } catch (error) {}\n  };\n\n  // login\n  const onLoginWithGoogle = async res => {\n    try {\n      const {\n        accessToken\n      } = res;\n      const response = await accountApi.postLoginWithGoogle(accessToken);\n      const {\n        status,\n        data\n      } = response;\n      if (status === 200) {\n        onLoginSuccess(data);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Đăng nhập thất bại, thử lại !';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n    autoLoad: false,\n    render: renderProps => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      className: classes.socialBtn,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: classes.socialImg,\n        src: ggIcon,\n        alt: \"GG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classes.socialName,\n        children: \"Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this),\n    onSuccess: onLoginWithGoogle,\n    onFailure: onLoginWithGoogle,\n    cookiePolicy: 'single_host_origin'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginGoogle, \"UJz8eCxZyheAe4tJhAxZ7Ps9B9A=\", false, function () {\n  return [useStyle, useDispatch];\n});\n_c = LoginGoogle;\nexport default LoginGoogle;\nvar _c;\n$RefreshReg$(_c, \"LoginGoogle\");","map":{"version":3,"names":["accountApi","ggIcon","UX","React","GoogleLogin","useDispatch","setMessage","useStyle","jsxDEV","_jsxDEV","LoginGoogle","_s","classes","dispatch","onLoginSuccess","type","message","duration","DELAY_TIME","setTimeout","location","href","error","onLoginWithGoogle","res","accessToken","response","postLoginWithGoogle","status","data","_error$response","_error$response$data","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","autoLoad","render","renderProps","onClick","disabled","className","socialBtn","children","socialImg","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","socialName","onSuccess","onFailure","cookiePolicy","_c","$RefreshReg$"],"sources":["D:/DuAn/thangdoan/dynonary-english/frontend/src/components/Login/SocialNetwork/Google.js"],"sourcesContent":["import accountApi from 'apis/accountApi';\r\nimport ggIcon from 'assets/icons/gg-icon.png';\r\nimport { UX } from 'constant';\r\nimport React from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setMessage } from 'redux/slices/message.slice';\r\nimport useStyle from './style';\r\n\r\nfunction LoginGoogle() {\r\n  const classes = useStyle();\r\n  const dispatch = useDispatch();\r\n\r\n  // handle success login\r\n  const onLoginSuccess = async () => {\r\n    try {\r\n      dispatch(\r\n        setMessage({\r\n          type: 'success',\r\n          message: 'Đăng nhập thành công',\r\n          duration: UX.DELAY_TIME,\r\n        }),\r\n      );\r\n\r\n      setTimeout(() => {\r\n        location.href = '/';\r\n      }, UX.DELAY_TIME);\r\n    } catch (error) {}\r\n  };\r\n\r\n  // login\r\n  const onLoginWithGoogle = async (res) => {\r\n    try {\r\n      const { accessToken } = res;\r\n\r\n      const response = await accountApi.postLoginWithGoogle(accessToken);\r\n      const { status, data } = response;\r\n\r\n      if (status === 200) {\r\n        onLoginSuccess(data);\r\n      }\r\n    } catch (error) {\r\n      const message =\r\n        error.response?.data?.message || 'Đăng nhập thất bại, thử lại !';\r\n      dispatch(setMessage({ type: 'error', message }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GoogleLogin\r\n      clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\r\n      autoLoad={false}\r\n      render={(renderProps) => (\r\n        <div\r\n          onClick={renderProps.onClick}\r\n          disabled={renderProps.disabled}\r\n          className={classes.socialBtn}>\r\n          <img className={classes.socialImg} src={ggIcon} alt=\"GG\" />\r\n          <span className={classes.socialName}>Google</span>\r\n        </div>\r\n      )}\r\n      onSuccess={onLoginWithGoogle}\r\n      onFailure={onLoginWithGoogle}\r\n      cookiePolicy={'single_host_origin'}\r\n    />\r\n  );\r\n}\r\n\r\nexport default LoginGoogle;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}