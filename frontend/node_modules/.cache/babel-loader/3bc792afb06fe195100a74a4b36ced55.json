{"ast":null,"code":"var _jsxFileName = \"D:\\\\DuAn\\\\TKwebsite3\\\\dynonary-english\\\\frontend\\\\src\\\\components\\\\DynoDictionary\\\\data.js\",\n  _s = $RefreshSig$();\nimport commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport { TOEIC_KEY } from 'constant/topics';\nimport { equalArray } from 'helper';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport DynoDictionary from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst perPage = 20;\nfunction DynoDictionaryData({\n  isTOEIC\n}) {\n  _s();\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [packInfo, setPackInfo] = useState(() => ({\n    type: '-1',\n    level: '-1',\n    specialty: '-1',\n    topics: isTOEIC ? [TOEIC_KEY] : []\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n  const settingWordPack = info => {\n    // check old pack vs new pack\n    let isEqual = true;\n    for (let k in packInfo) {\n      if (k !== 'topics' && packInfo[k] !== info[k]) {\n        isEqual = false;\n        break;\n      }\n    }\n    if (isEqual) isEqual = equalArray(packInfo.topics, info.topics);\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n  const onSortTypeChange = (type = 'rand') => {\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n  const onSearchWord = async word => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n      const apiRes = await wordApi.getSearchWord(word);\n      if (apiRes.status === 200) {\n        const {\n          packList = []\n        } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get total word pack\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n        const apiRes = await commonApi.getWordPackTotal(packInfo);\n        if (apiRes.status === 200 && isSub) {\n          const {\n            total = 0\n          } = apiRes.data;\n          totalPage.current = Math.ceil(total / perPage);\n        }\n      } catch (error) {}\n    })();\n    return () => isSub = false;\n  }, [packInfo]);\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getWordList(page, perPage, packInfo, sortType);\n        if (apiRes.status === 200 && isSub) {\n          const {\n            packList = []\n          } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n    return () => isSub = false;\n  }, [page, packInfo, sortType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DynoDictionary, {\n      isTOEIC: isTOEIC,\n      list: list,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSettingWordPack: settingWordPack,\n      onSortTypeChange: onSortTypeChange,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WordDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(DynoDictionaryData, \"fX/xNPhF7DraZhB8ZGe4i7HPFI0=\");\n_c = DynoDictionaryData;\nDynoDictionaryData.propTypes = {\n  isTOEIC: PropTypes.bool\n};\nDynoDictionaryData.defaultProps = {\n  isTOEIC: false\n};\nexport default DynoDictionaryData;\nvar _c;\n$RefreshReg$(_c, \"DynoDictionaryData\");","map":{"version":3,"names":["commonApi","wordApi","WordDetailModal","TOEIC_KEY","equalArray","PropTypes","React","useEffect","useRef","useState","DynoDictionary","jsxDEV","_jsxDEV","Fragment","_Fragment","perPage","DynoDictionaryData","isTOEIC","_s","page","setPage","sortType","setSortType","packInfo","setPackInfo","type","level","specialty","topics","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","totalPage","preSearchList","nextPage","current","settingWordPack","info","isEqual","k","onSortTypeChange","onSearchWord","word","apiRes","getSearchWord","status","packList","data","error","isSub","getWordPackTotal","total","Math","ceil","getWordList","newList","children","onLoadData","onSettingWordPack","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","bool","defaultProps","$RefreshReg$"],"sources":["D:/DuAn/TKwebsite3/dynonary-english/frontend/src/components/DynoDictionary/data.js"],"sourcesContent":["import commonApi from 'apis/commonApi';\r\nimport wordApi from 'apis/wordApi';\r\nimport WordDetailModal from 'components/UI/WordDetailModal';\r\nimport { TOEIC_KEY } from 'constant/topics';\r\nimport { equalArray } from 'helper';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport DynoDictionary from '.';\r\n\r\nconst perPage = 20;\r\n\r\nfunction DynoDictionaryData({ isTOEIC }) {\r\n  const [page, setPage] = useState(1);\r\n  const [sortType, setSortType] = useState('rand');\r\n  const [packInfo, setPackInfo] = useState(() => ({\r\n    type: '-1',\r\n    level: '-1',\r\n    specialty: '-1',\r\n    topics: isTOEIC ? [TOEIC_KEY] : [],\r\n  }));\r\n  const [loading, setLoading] = useState(true);\r\n  const [list, setList] = useState([]);\r\n  const [more, setMore] = useState(true); // toggle infinite scrolling\r\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\r\n  const totalPage = useRef(0);\r\n  const preSearchList = useRef([]);\r\n\r\n  const nextPage = () => {\r\n    if (page < totalPage.current) {\r\n      setPage(page + 1);\r\n    } else {\r\n      setMore(false);\r\n    }\r\n  };\r\n\r\n  const settingWordPack = (info) => {\r\n    // check old pack vs new pack\r\n    let isEqual = true;\r\n    for (let k in packInfo) {\r\n      if (k !== 'topics' && packInfo[k] !== info[k]) {\r\n        isEqual = false;\r\n        break;\r\n      }\r\n    }\r\n    if (isEqual) isEqual = equalArray(packInfo.topics, info.topics);\r\n\r\n    totalPage.current = 0;\r\n    preSearchList.current = [];\r\n    setMore(true);\r\n    setList([]);\r\n    setPackInfo(info);\r\n    setPage(1);\r\n  };\r\n\r\n  const onSortTypeChange = (type = 'rand') => {\r\n    if (type === sortType) return;\r\n    preSearchList.current = [];\r\n    setSortType(type);\r\n    setPage(1);\r\n    setList([]);\r\n  };\r\n\r\n  const onSearchWord = async (word) => {\r\n    try {\r\n      if (word === '') {\r\n        setList(preSearchList.current);\r\n        setMore(true);\r\n        return;\r\n      }\r\n\r\n      const apiRes = await wordApi.getSearchWord(word);\r\n      if (apiRes.status === 200) {\r\n        const { packList = [] } = apiRes.data;\r\n        setList(packList);\r\n        setMore(false);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  // get total word pack\r\n  useEffect(() => {\r\n    let isSub = true;\r\n\r\n    (async function () {\r\n      try {\r\n        const apiRes = await commonApi.getWordPackTotal(packInfo);\r\n        if (apiRes.status === 200 && isSub) {\r\n          const { total = 0 } = apiRes.data;\r\n          totalPage.current = Math.ceil(total / perPage);\r\n        }\r\n      } catch (error) {}\r\n    })();\r\n\r\n    return () => (isSub = false);\r\n  }, [packInfo]);\r\n\r\n  // get word pack\r\n  useEffect(() => {\r\n    let isSub = true;\r\n\r\n    (async function () {\r\n      try {\r\n        setLoading(true);\r\n        const apiRes = await wordApi.getWordList(\r\n          page,\r\n          perPage,\r\n          packInfo,\r\n          sortType,\r\n        );\r\n        if (apiRes.status === 200 && isSub) {\r\n          const { packList = [] } = apiRes.data;\r\n          const newList = [...list, ...packList];\r\n          preSearchList.current = newList;\r\n          setList(newList);\r\n        }\r\n      } catch (error) {\r\n      } finally {\r\n        if (isSub) {\r\n          setLoading(false);\r\n          isFirstLoad && setIsFirstLoad(false);\r\n        }\r\n      }\r\n    })();\r\n\r\n    return () => (isSub = false);\r\n  }, [page, packInfo, sortType]);\r\n\r\n  return (\r\n    <>\r\n      <DynoDictionary\r\n        isTOEIC={isTOEIC}\r\n        list={list}\r\n        loading={loading}\r\n        onLoadData={nextPage}\r\n        more={more}\r\n        isFirstLoad={isFirstLoad}\r\n        onSettingWordPack={settingWordPack}\r\n        onSortTypeChange={onSortTypeChange}\r\n        onSearchWord={onSearchWord}\r\n      />\r\n      <WordDetailModal />\r\n    </>\r\n  );\r\n}\r\n\r\nDynoDictionaryData.propTypes = {\r\n  isTOEIC: PropTypes.bool,\r\n};\r\n\r\nDynoDictionaryData.defaultProps = {\r\n  isTOEIC: false,\r\n};\r\n\r\nexport default DynoDictionaryData;\r\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,OAAOC,OAAO,MAAM,cAAc;AAClC,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,UAAU,QAAQ,QAAQ;AACnC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,cAAc,MAAM,GAAG;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE/B,MAAMC,OAAO,GAAG,EAAE;AAElB,SAASC,kBAAkBA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,MAAM,CAAC;EAChD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,OAAO;IAC9CgB,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,IAAI;IACXC,SAAS,EAAE,IAAI;IACfC,MAAM,EAAEX,OAAO,GAAG,CAACd,SAAS,CAAC,GAAG;EAClC,CAAC,CAAC,CAAC;EACH,MAAM,CAAC0B,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACsB,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACwB,IAAI,EAAEC,OAAO,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM4B,SAAS,GAAG7B,MAAM,CAAC,CAAC,CAAC;EAC3B,MAAM8B,aAAa,GAAG9B,MAAM,CAAC,EAAE,CAAC;EAEhC,MAAM+B,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAIpB,IAAI,GAAGkB,SAAS,CAACG,OAAO,EAAE;MAC5BpB,OAAO,CAACD,IAAI,GAAG,CAAC,CAAC;IACnB,CAAC,MAAM;MACLe,OAAO,CAAC,KAAK,CAAC;IAChB;EACF,CAAC;EAED,MAAMO,eAAe,GAAIC,IAAI,IAAK;IAChC;IACA,IAAIC,OAAO,GAAG,IAAI;IAClB,KAAK,IAAIC,CAAC,IAAIrB,QAAQ,EAAE;MACtB,IAAIqB,CAAC,KAAK,QAAQ,IAAIrB,QAAQ,CAACqB,CAAC,CAAC,KAAKF,IAAI,CAACE,CAAC,CAAC,EAAE;QAC7CD,OAAO,GAAG,KAAK;QACf;MACF;IACF;IACA,IAAIA,OAAO,EAAEA,OAAO,GAAGvC,UAAU,CAACmB,QAAQ,CAACK,MAAM,EAAEc,IAAI,CAACd,MAAM,CAAC;IAE/DS,SAAS,CAACG,OAAO,GAAG,CAAC;IACrBF,aAAa,CAACE,OAAO,GAAG,EAAE;IAC1BN,OAAO,CAAC,IAAI,CAAC;IACbF,OAAO,CAAC,EAAE,CAAC;IACXR,WAAW,CAACkB,IAAI,CAAC;IACjBtB,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC;EAED,MAAMyB,gBAAgB,GAAGA,CAACpB,IAAI,GAAG,MAAM,KAAK;IAC1C,IAAIA,IAAI,KAAKJ,QAAQ,EAAE;IACvBiB,aAAa,CAACE,OAAO,GAAG,EAAE;IAC1BlB,WAAW,CAACG,IAAI,CAAC;IACjBL,OAAO,CAAC,CAAC,CAAC;IACVY,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;EAED,MAAMc,YAAY,GAAG,MAAOC,IAAI,IAAK;IACnC,IAAI;MACF,IAAIA,IAAI,KAAK,EAAE,EAAE;QACff,OAAO,CAACM,aAAa,CAACE,OAAO,CAAC;QAC9BN,OAAO,CAAC,IAAI,CAAC;QACb;MACF;MAEA,MAAMc,MAAM,GAAG,MAAM/C,OAAO,CAACgD,aAAa,CAACF,IAAI,CAAC;MAChD,IAAIC,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;QACzB,MAAM;UAAEC,QAAQ,GAAG;QAAG,CAAC,GAAGH,MAAM,CAACI,IAAI;QACrCpB,OAAO,CAACmB,QAAQ,CAAC;QACjBjB,OAAO,CAAC,KAAK,CAAC;MAChB;IACF,CAAC,CAAC,OAAOmB,KAAK,EAAE,CAAC;EACnB,CAAC;;EAED;EACA9C,SAAS,CAAC,MAAM;IACd,IAAI+C,KAAK,GAAG,IAAI;IAEhB,CAAC,kBAAkB;MACjB,IAAI;QACF,MAAMN,MAAM,GAAG,MAAMhD,SAAS,CAACuD,gBAAgB,CAAChC,QAAQ,CAAC;QACzD,IAAIyB,MAAM,CAACE,MAAM,KAAK,GAAG,IAAII,KAAK,EAAE;UAClC,MAAM;YAAEE,KAAK,GAAG;UAAE,CAAC,GAAGR,MAAM,CAACI,IAAI;UACjCf,SAAS,CAACG,OAAO,GAAGiB,IAAI,CAACC,IAAI,CAACF,KAAK,GAAGzC,OAAO,CAAC;QAChD;MACF,CAAC,CAAC,OAAOsC,KAAK,EAAE,CAAC;IACnB,CAAC,EAAE,CAAC;IAEJ,OAAO,MAAOC,KAAK,GAAG,KAAM;EAC9B,CAAC,EAAE,CAAC/B,QAAQ,CAAC,CAAC;;EAEd;EACAhB,SAAS,CAAC,MAAM;IACd,IAAI+C,KAAK,GAAG,IAAI;IAEhB,CAAC,kBAAkB;MACjB,IAAI;QACFxB,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMkB,MAAM,GAAG,MAAM/C,OAAO,CAAC0D,WAAW,CACtCxC,IAAI,EACJJ,OAAO,EACPQ,QAAQ,EACRF,QACF,CAAC;QACD,IAAI2B,MAAM,CAACE,MAAM,KAAK,GAAG,IAAII,KAAK,EAAE;UAClC,MAAM;YAAEH,QAAQ,GAAG;UAAG,CAAC,GAAGH,MAAM,CAACI,IAAI;UACrC,MAAMQ,OAAO,GAAG,CAAC,GAAG7B,IAAI,EAAE,GAAGoB,QAAQ,CAAC;UACtCb,aAAa,CAACE,OAAO,GAAGoB,OAAO;UAC/B5B,OAAO,CAAC4B,OAAO,CAAC;QAClB;MACF,CAAC,CAAC,OAAOP,KAAK,EAAE,CAChB,CAAC,SAAS;QACR,IAAIC,KAAK,EAAE;UACTxB,UAAU,CAAC,KAAK,CAAC;UACjBK,WAAW,IAAIC,cAAc,CAAC,KAAK,CAAC;QACtC;MACF;IACF,CAAC,EAAE,CAAC;IAEJ,OAAO,MAAOkB,KAAK,GAAG,KAAM;EAC9B,CAAC,EAAE,CAACnC,IAAI,EAAEI,QAAQ,EAAEF,QAAQ,CAAC,CAAC;EAE9B,oBACET,OAAA,CAAAE,SAAA;IAAA+C,QAAA,gBACEjD,OAAA,CAACF,cAAc;MACbO,OAAO,EAAEA,OAAQ;MACjBc,IAAI,EAAEA,IAAK;MACXF,OAAO,EAAEA,OAAQ;MACjBiC,UAAU,EAAEvB,QAAS;MACrBN,IAAI,EAAEA,IAAK;MACXE,WAAW,EAAEA,WAAY;MACzB4B,iBAAiB,EAAEtB,eAAgB;MACnCI,gBAAgB,EAAEA,gBAAiB;MACnCC,YAAY,EAAEA;IAAa;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACFvD,OAAA,CAACV,eAAe;MAAA8D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACnB,CAAC;AAEP;AAACjD,EAAA,CApIQF,kBAAkB;AAAAoD,EAAA,GAAlBpD,kBAAkB;AAsI3BA,kBAAkB,CAACqD,SAAS,GAAG;EAC7BpD,OAAO,EAAEZ,SAAS,CAACiE;AACrB,CAAC;AAEDtD,kBAAkB,CAACuD,YAAY,GAAG;EAChCtD,OAAO,EAAE;AACX,CAAC;AAED,eAAeD,kBAAkB;AAAC,IAAAoD,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module"}