{"ast":null,"code":"var _jsxFileName = \"D:\\\\DuAn\\\\thangdoan\\\\dynonary-english\\\\frontend\\\\src\\\\components\\\\Contribution\\\\Sentence\\\\data.js\",\n  _s = $RefreshSig$();\nimport sentenceApi from 'apis/sentenceApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport SentenceContribution from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SentenceContributionData() {\n  _s();\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n  const handleSubmit = async formData => {\n    const {\n      sentence,\n      mean,\n      note,\n      topics\n    } = formData;\n    try {\n      setSubmitting(true);\n      const apiRes = await sentenceApi.postContributeSentence(sentence, mean, note, topics);\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\n          duration: 5000\n        }));\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Thêm câu mới không thành công, thử lại';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SentenceContribution, {\n    submitting: submitting,\n    onSubmitForm: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(SentenceContributionData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n_c = SentenceContributionData;\nexport default SentenceContributionData;\nvar _c;\n$RefreshReg$(_c, \"SentenceContributionData\");","map":{"version":3,"names":["sentenceApi","React","useState","useDispatch","setMessage","SentenceContribution","jsxDEV","_jsxDEV","SentenceContributionData","_s","submitting","setSubmitting","dispatch","handleSubmit","formData","sentence","mean","note","topics","apiRes","postContributeSentence","status","type","message","duration","error","_error$response","_error$response$data","response","data","onSubmitForm","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DuAn/thangdoan/dynonary-english/frontend/src/components/Contribution/Sentence/data.js"],"sourcesContent":["import sentenceApi from 'apis/sentenceApi';\r\nimport React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setMessage } from 'redux/slices/message.slice';\r\nimport SentenceContribution from './index';\r\n\r\nfunction SentenceContributionData() {\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = async (formData) => {\r\n    const { sentence, mean, note, topics } = formData;\r\n    try {\r\n      setSubmitting(true);\r\n\r\n      const apiRes = await sentenceApi.postContributeSentence(\r\n        sentence,\r\n        mean,\r\n        note,\r\n        topics,\r\n      );\r\n      if (apiRes.status === 200) {\r\n        dispatch(\r\n          setMessage({\r\n            type: 'success',\r\n            message:\r\n              'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\r\n            duration: 5000,\r\n          }),\r\n        );\r\n      }\r\n    } catch (error) {\r\n      const message =\r\n        error.response?.data?.message ||\r\n        'Thêm câu mới không thành công, thử lại';\r\n      dispatch(\r\n        setMessage({\r\n          type: 'error',\r\n          message,\r\n        }),\r\n      );\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SentenceContribution submitting={submitting} onSubmitForm={handleSubmit} />\r\n  );\r\n}\r\n\r\nexport default SentenceContributionData;\r\n"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,QAAQ,4BAA4B;AACvD,OAAOC,oBAAoB,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,wBAAwBA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,MAAMU,YAAY,GAAG,MAAOC,QAAQ,IAAK;IACvC,MAAM;MAAEC,QAAQ;MAAEC,IAAI;MAAEC,IAAI;MAAEC;IAAO,CAAC,GAAGJ,QAAQ;IACjD,IAAI;MACFH,aAAa,CAAC,IAAI,CAAC;MAEnB,MAAMQ,MAAM,GAAG,MAAMnB,WAAW,CAACoB,sBAAsB,CACrDL,QAAQ,EACRC,IAAI,EACJC,IAAI,EACJC,MACF,CAAC;MACD,IAAIC,MAAM,CAACE,MAAM,KAAK,GAAG,EAAE;QACzBT,QAAQ,CACNR,UAAU,CAAC;UACTkB,IAAI,EAAE,SAAS;UACfC,OAAO,EACL,mEAAmE;UACrEC,QAAQ,EAAE;QACZ,CAAC,CACH,CAAC;MACH;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACd,MAAMJ,OAAO,GACX,EAAAG,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBJ,OAAO,KAC7B,wCAAwC;MAC1CX,QAAQ,CACNR,UAAU,CAAC;QACTkB,IAAI,EAAE,OAAO;QACbC;MACF,CAAC,CACH,CAAC;IACH,CAAC,SAAS;MACRZ,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACEJ,OAAA,CAACF,oBAAoB;IAACK,UAAU,EAAEA,UAAW;IAACoB,YAAY,EAAEjB;EAAa;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEhF;AAACzB,EAAA,CA3CQD,wBAAwB;EAAA,QAEdL,WAAW;AAAA;AAAAgC,EAAA,GAFrB3B,wBAAwB;AA6CjC,eAAeA,wBAAwB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}